import { useEffect, useState, useRef } from 'react';
import { io, Socket } from 'socket.io-client';

const SERVER_URL = 'http://localhost:7777/message';  // URL c·ªßa server c·ªßa b·∫°n

// Hook k·∫øt n·ªëi WebSocket v√† l·∫Øng nghe tin nh·∫Øn
const useSocket = (userId: string) => {
  const socketRef = useRef<Socket | null>(null);
  const [newMessages, setNewMessages] = useState<any[]>([]);

  useEffect(() => {
    console.log("K·∫øt n·ªëi v·ªõi WebSocket...");

    if (!socketRef.current) {
      // K·∫øt n·ªëi WebSocket v√† g·ª≠i k√®m accessToken trong header
      socketRef.current = io(SERVER_URL, {
        transports: ['websocket'],
        auth: { token: 'a' }, // G·ª≠i accessToken trong header c·ªßa WebSocket
      });

      // L·∫Øng nghe s·ª± ki·ªán tin nh·∫Øn c·ªßa userId
      const handleNewMessage = (message: any) => {
        console.log('üì© Tin nh·∫Øn m·ªõi:', message);
        setNewMessages(prevMessages => [...prevMessages, message]);
      };

      socketRef.current.on(`message:${userId}`, handleNewMessage);
    }

    // Cleanup khi component unmount ho·∫∑c khi userId ho·∫∑c accessToken thay ƒë·ªïi
    return () => {
      console.log("Ng·∫Øt k·∫øt n·ªëi WebSocket...");
      if (socketRef.current) {
        socketRef.current.off(`message:${userId}`);
        socketRef.current.disconnect();
        socketRef.current = null;
      }
    };
  }, [userId]);  // Ch·∫°y l·∫°i khi userId ho·∫∑c accessToken thay ƒë·ªïi

  // Tr·∫£ v·ªÅ socket v√† danh s√°ch tin nh·∫Øn
  return { socket: socketRef.current, newMessages };
};

export default useSocket;
